/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TicketMarket, TicketMarketInterface } from "../TicketMarket";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "startDate",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "MarketEventCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "purchaseLimit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "MarketTicketCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "buyTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "uint64",
        name: "startDate",
        type: "uint64",
      },
    ],
    name: "createEvent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "purchaseLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllEvents",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "eventId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
        ],
        internalType: "struct TicketMarket.MarketEvent[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
    ],
    name: "getEvent",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "eventId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
        ],
        internalType: "struct TicketMarket.MarketEvent",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
    ],
    name: "getEventTickets",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "eventId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "purchaseLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
        ],
        internalType: "struct TicketMarket.MarketTicket[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyEvents",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "eventId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint64",
            name: "startDate",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
        ],
        internalType: "struct TicketMarket.MarketEvent[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
    ],
    name: "getMyTickets",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "eventId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "purchaseLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
        ],
        internalType: "struct TicketMarket.MarketTicket[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611e19806100206000396000f3fe60806040526004361061009c5760003560e01c8063bc197c8111610064578063bc197c8114610174578063c27a500d146101b9578063ca261ce1146101ce578063d88b24a9146101ee578063e3e5c2b91461021c578063f23a6e611461022f57600080fd5b806301ffc9a7146100a15780633548124b146100d65780636d1884e0146100f8578063806d1a37146101255780638aaf268614610147575b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046119cb565b61025b565b60405190151581526020015b60405180910390f35b3480156100e257600080fd5b506100eb61026c565b6040516100cd9190611bb2565b34801561010457600080fd5b50610118610113366004611a5f565b6104de565b6040516100cd9190611cd0565b34801561013157600080fd5b50610145610140366004611a8f565b610631565b005b34801561015357600080fd5b50610167610162366004611878565b610981565b6040516100cd9190611c13565b34801561018057600080fd5b506101a061018f366004611892565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100cd565b3480156101c557600080fd5b506100eb610c2d565b3480156101da57600080fd5b506101676101e9366004611a5f565b610e92565b3480156101fa57600080fd5b5061020e6102093660046119f3565b61104c565b6040519081526020016100cd565b61014561022a366004611999565b6111ac565b34801561023b57600080fd5b506101a061024a366004611937565b63f23a6e6160e01b95945050505050565b600061026682611616565b92915050565b6060600061027960015490565b905060008060005b838110156102e3573360036000610299846001611d13565b8152602081019190915260400160002060020154600160401b90046001600160a01b031614156102d1576102ce600184611d13565b92505b806102db81611d9c565b915050610281565b506000826001600160401b0381111561030c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561034557816020015b61033261164b565b81526020019060019003908161032a5790505b50905060005b848110156104d5573360036000610363846001611d13565b8152602081019190915260400160002060020154600160401b90046001600160a01b031614156104c357600061039a826001611d13565b9050600060036000838152602001908152602001600020905080604051806080016040529081600082015481526020016001820180546103d990611d61565b80601f016020809104026020016040519081016040528092919081815260200182805461040590611d61565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b5050509183525050600291909101546001600160401b0381166020830152600160401b90046001600160a01b031660409091015284518590879081106104a857634e487b7160e01b600052603260045260246000fd5b60209081029190910101526104be600186611d13565b945050505b806104cd81611d9c565b91505061034b565b50949350505050565b6104e661164b565b6000828152600360205260409020546105465760405162461bcd60e51b815260206004820152601960248201527f54686973206576656e7420646f6573206e6f742065786973740000000000000060448201526064015b60405180910390fd5b600360008381526020019081526020016000206040518060800160405290816000820154815260200160018201805461057e90611d61565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa90611d61565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050509183525050600291909101546001600160401b0381166020830152600160401b90046001600160a01b031660409091015292915050565b600081116106815760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d757374206265206174206c6561737420312077656900000000604482015260640161053d565b604051627eeac760e11b81523360048201526024810186905282906001600160a01b0386169062fdd58e9060440160206040518083038186803b1580156106c757600080fd5b505afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff9190611a77565b101561076a5760405162461bcd60e51b815260206004820152603460248201527f596f7520646f206e6f74206f776e20746865204e4654207469636b657420796f6044820152731d48185c99481d1c9e5a5b99c81d1bc81b1a5cdd60621b606482015260840161053d565b600086815260036020526040902060020154600160401b90046001600160a01b031633146107da5760405162461bcd60e51b815260206004820152601960248201527f596f7520646f206e6f74206f776e2074686973206576656e7400000000000000604482015260640161053d565b6000868152600360205260409020600201546001600160401b0390811642909116106108435760405162461bcd60e51b8152602060048201526018602482015277115d995b9d081a185cc8185b1c9958591e481c185cdcd95960421b604482015260640161053d565b610851600080546001019055565b6040805160c08101825286815260208082018981523383850181815260608501878152608086018a815260a087018a815260008e8152600497889052899020975188559451600188015591516002870180546001600160a01b0319166001600160a01b039283161790559051600387015590518585015591516005909401939093559251637921219560e11b81529287169263f242432a926108fb92909130918b91899101611b7a565b600060405180830381600087803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b50506040805133815260208101859052908101869052606081018590528892508791507f6bb5861eb6dc88b7c26ba9614d4c5a07978638a2fd2f71b64e8d1cb85f3311af9060800160405180910390a3505050505050565b6060600061098e60005490565b905060008060005b83811015610a5a5760016001600160a01b03871662fdd58e336109b98585611d13565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190611a77565b10610a4857610a45600184611d13565b92505b80610a5281611d9c565b915050610996565b506000826001600160401b03811115610a8357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610abc57816020015b610aa9611685565b815260200190600190039081610aa15790505b50905060005b84811015610c235760016001600160a01b03881662fdd58e33610ae58585611d13565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610b2957600080fd5b505afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190611a77565b10610c11576000610b73826001611d13565b600081815260046020818152604092839020835160c0810185528154815260018201549281019290925260028101546001600160a01b03169382019390935260038301546060820152908201546080820152600582015460a082015285519293509091859087908110610bf657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c0c600186611d13565b945050505b80610c1b81611d9c565b915050610ac2565b5095945050505050565b60606000610c3a60015490565b905060008060005b83811015610ca25760036000610c59836001611d13565b81526020810191909152604001600020600201546001600160401b03908116429091161015610c9057610c8d600184611d13565b92505b80610c9a81611d9c565b915050610c42565b506000826001600160401b03811115610ccb57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d0457816020015b610cf161164b565b815260200190600190039081610ce95790505b50905060005b848110156104d55760036000610d21836001611d13565b81526020810191909152604001600020600201546001600160401b03908116429091161015610e80576000610d57826001611d13565b905060006003600083815260200190815260200160002090508060405180608001604052908160008201548152602001600182018054610d9690611d61565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc290611d61565b8015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b5050509183525050600291909101546001600160401b0381166020830152600160401b90046001600160a01b03166040909101528451859087908110610e6557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610e7b600186611d13565b945050505b80610e8a81611d9c565b915050610d0a565b60606000610e9f60005490565b905060008060005b83811015610ef7578560046000610ebf846001611d13565b8152602001908152602001600020600101541415610ee557610ee2600184611d13565b92505b80610eef81611d9c565b915050610ea7565b506000826001600160401b03811115610f2057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f5957816020015b610f46611685565b815260200190600190039081610f3e5790505b50905060005b84811015610c23578660046000610f77846001611d13565b815260200190815260200160002060010154141561103a576000610f9c826001611d13565b600081815260046020818152604092839020835160c0810185528154815260018201549281019290925260028101546001600160a01b03169382019390935260038301546060820152908201546080820152600582015460a08201528551929350909185908790811061101f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611035600186611d13565b945050505b8061104481611d9c565b915050610f5f565b60003361105857600080fd5b816001600160401b0316426001600160401b0316106110b95760405162461bcd60e51b815260206004820152601760248201527f446174652068617320616c726561647920706173736564000000000000000000604482015260640161053d565b6110c7600180546001019055565b60006110d260015490565b6040805160808101825282815260208082018881526001600160401b03881683850152336060840152600085815260038352939093208251815592518051949550919361112592600185019201906116c4565b50604082810151600290920180546060909401516001600160a01b0316600160401b026001600160e01b03199094166001600160401b03909316929092179290921790555181907f53ea3621695ba0dd1161b566c1cb3655d0df416964448b4b43bea64e5fb968f19061119d90879087903390611c94565b60405180910390a29392505050565b6000828152600460208190526040918290206003810154818301546002909201549351627eeac760e11b81523093810193909352602483018690529290916001600160a01b03918216916001919088169062fdd58e9060440160206040518083038186803b15801561121d57600080fd5b505afa158015611231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112559190611a77565b10156112985760405162461bcd60e51b8152602060048201526012602482015271233937b69036bab9ba1031329037bbb732b960711b604482015260640161053d565b604051627eeac760e11b8152306004820152602481018690526001600160a01b0387169062fdd58e9060440160206040518083038186803b1580156112dc57600080fd5b505afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190611a77565b84111561137b5760405162461bcd60e51b815260206004820152602f60248201527f4e6f7420656e6f756768207469636b6574732072656d61696e696e67206f6e2060448201526e746865206d61726b6574706c61636560881b606482015260840161053d565b604051627eeac760e11b8152336004820152602481018690526001600160a01b0387169062fdd58e9060440160206040518083038186803b1580156113bf57600080fd5b505afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190611a77565b6114019083611d4a565b84111561148a5760405162461bcd60e51b815260206004820152604b60248201527f596f75206861766520657863656564656420746865206d6178696d756d20616d60448201527f6f756e74206f66207469636b65747320796f752061726520616c6c6f7765642060648201526a746f20707572636861736560a81b608482015260a40161053d565b6114948484611d2b565b34146114da5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da081b5bdb995e481cd95b9d605a1b604482015260640161053d565b600085815260046020908152604080832060010154835260039091529020600201546001600160401b0390811642909116106115535760405162461bcd60e51b8152602060048201526018602482015277115d995b9d081a185cc8185b1c9958591e481c185cdcd95960421b604482015260640161053d565b60008581526004602081905260409182902060020180546001600160a01b03191690559051637921219560e11b81526001600160a01b0388169163f242432a916115a591309133918b918b9101611b7a565b600060405180830381600087803b1580156115bf57600080fd5b505af11580156115d3573d6000803e3d6000fd5b50506040516001600160a01b03841692503480156108fc029250906000818181858888f1935050505015801561160d573d6000803e3d6000fd5b50505050505050565b60006001600160e01b03198216630271189760e51b148061026657506301ffc9a760e01b6001600160e01b0319831614610266565b6040518060800160405280600081526020016060815260200160006001600160401b0316815260200160006001600160a01b031681525090565b6040518060c00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b8280546116d090611d61565b90600052602060002090601f0160209004810192826116f25760008555611738565b82601f1061170b57805160ff1916838001178555611738565b82800160010185558215611738579182015b8281111561173857825182559160200191906001019061171d565b50611744929150611748565b5090565b5b808211156117445760008155600101611749565b60006001600160401b0383111561177657611776611dcd565b611789601f8401601f1916602001611ce3565b905082815283838301111561179d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146117cb57600080fd5b919050565b600082601f8301126117e0578081fd5b813560206001600160401b038211156117fb576117fb611dcd565b8160051b61180a828201611ce3565b838152828101908684018388018501891015611824578687fd5b8693505b85841015611846578035835260019390930192918401918401611828565b50979650505050505050565b600082601f830112611862578081fd5b6118718383356020850161175d565b9392505050565b600060208284031215611889578081fd5b611871826117b4565b600080600080600060a086880312156118a9578081fd5b6118b2866117b4565b94506118c0602087016117b4565b935060408601356001600160401b03808211156118db578283fd5b6118e789838a016117d0565b945060608801359150808211156118fc578283fd5b61190889838a016117d0565b9350608088013591508082111561191d578283fd5b5061192a88828901611852565b9150509295509295909350565b600080600080600060a0868803121561194e578081fd5b611957866117b4565b9450611965602087016117b4565b9350604086013592506060860135915060808601356001600160401b0381111561198d578182fd5b61192a88828901611852565b6000806000606084860312156119ad578283fd5b6119b6846117b4565b95602085013595506040909401359392505050565b6000602082840312156119dc578081fd5b81356001600160e01b031981168114611871578182fd5b60008060408385031215611a05578182fd5b82356001600160401b0380821115611a1b578384fd5b818501915085601f830112611a2e578384fd5b611a3d8683356020850161175d565b9350602085013591508082168214611a53578283fd5b50809150509250929050565b600060208284031215611a70578081fd5b5035919050565b600060208284031215611a88578081fd5b5051919050565b60008060008060008060c08789031215611aa7578081fd5b8635955060208701359450611abe604088016117b4565b9350606087013592506080870135915060a087013590509295509295509295565b60008151808452815b81811015611b0457602081850181015186830182015201611ae8565b81811115611b155782602083870101525b50601f01601f19169290920160200192915050565b805182526000602082015160806020850152611b496080850182611adf565b6040848101516001600160401b0316908601526060938401516001600160a01b031693909401929092525090919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015611c0657603f19888603018452611bf4858351611b2a565b94509285019290850190600101611bd8565b5092979650505050505050565b602080825282518282018190526000919060409081850190868401855b82811015611c87578151805185528681015187860152858101516001600160a01b031686860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101611c30565b5091979650505050505050565b606081526000611ca76060830186611adf565b6001600160401b03949094166020830152506001600160a01b0391909116604090910152919050565b6020815260006118716020830184611b2a565b604051601f8201601f191681016001600160401b0381118282101715611d0b57611d0b611dcd565b604052919050565b60008219821115611d2657611d26611db7565b500190565b6000816000190483118215151615611d4557611d45611db7565b500290565b600082821015611d5c57611d5c611db7565b500390565b600181811c90821680611d7557607f821691505b60208210811415611d9657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611db057611db0611db7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122065d8964651b14c2c07c4ddd58d7dcf79a3c6bd93dda477dd54817e356e23157864736f6c63430008040033";

type TicketMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketMarket__factory extends ContractFactory {
  constructor(...args: TicketMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TicketMarket";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TicketMarket> {
    return super.deploy(overrides || {}) as Promise<TicketMarket>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TicketMarket {
    return super.attach(address) as TicketMarket;
  }
  connect(signer: Signer): TicketMarket__factory {
    return super.connect(signer) as TicketMarket__factory;
  }
  static readonly contractName: "TicketMarket";
  public readonly contractName: "TicketMarket";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketMarketInterface {
    return new utils.Interface(_abi) as TicketMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TicketMarket {
    return new Contract(address, _abi, signerOrProvider) as TicketMarket;
  }
}
